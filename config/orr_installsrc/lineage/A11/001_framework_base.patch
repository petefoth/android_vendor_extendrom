
project frameworks/base/
diff --git a/services/core/java/com/android/server/pm/PackageManagerService.java b/services/core/java/com/android/server/pm/PackageManagerService.java
--- a/services/core/java/com/android/server/pm/PackageManagerService.java
+++ b/services/core/java/com/android/server/pm/PackageManagerService.java
@@ -4465,6 +4465,55 @@ public class PackageManagerService extends IPackageManager.Stub
                 });
             }
 
+            /**
+                extendrom intercept installation source
+                - com.machiav3lli.backup: Neo Backup
+                - F-Droid on e.g A11 results in: com.android.packageinstaller
+                - null: usually a system app
+            **/
+            String pkgName = resolveExternalPackageNameLPr(p);
+            String PACKAGE_PLAY_STORE = "com.android.vending";
+            String[] PACKAGES_SPOOF_INSTALLSOURCE =
+                new String[] {  "com.aurora.store",
+                                "dev.imranr.obtainium",
+                                "org.fdroid.fdroid",
+                                "com.machiav3lli.backup"
+                             };
+            ContentResolver contentResolver = mContext.getContentResolver();
+            if (contentResolver != null) {
+                try {
+                    int installSrcValue = android.provider.Settings.Secure.getInt(contentResolver,
+                        android.provider.Settings.Secure.ER_ORR_INSTALLSRC, 0);
+
+                    if (android.provider.Settings.Secure.getInt(contentResolver,
+                            android.provider.Settings.Secure.ER_ORR_INSTALLSRC, 0) == 1) {
+                        InstallSource installSource = ps.installSource;
+                        if (installSource != null && installSource.installerPackageName != null
+                                && mSettings.getPackageLPr(PACKAGE_PLAY_STORE) != null
+                                && callingUid != Process.SYSTEM_UID
+                                && Arrays.asList(PACKAGES_SPOOF_INSTALLSOURCE).contains(installSource.installerPackageName)) {
+                            Log.w(TAG, "EXTROM: Intercepting installation source for package >" + pkgName + "< originated from: >" + installSource.installerPackageName + "<");
+
+                            ps.installSource = InstallSource.create(
+                                PACKAGE_PLAY_STORE,
+                                PACKAGE_PLAY_STORE,
+                                PACKAGE_PLAY_STORE,
+                                installSource.isOrphaned,
+                                false)
+                                .setInitiatingPackageSignatures(new PackageSignatures(
+                                  mSettings.mPackages.get(PACKAGE_PLAY_STORE).getSigningDetails()));
+                        //} else {
+                        //    Log.d(TAG, "NOT intercepting bc origin installation source >" + installSource.installerPackageName + "< is not in spooflist for package " + pkgName);
+                        }
+                    } else {
+                        Log.d(TAG, "EXTROM: NOT intercepting bc condition not met for: " + pkgName + ", UID: " + callingUid + ", source: " + ps.installSource + ", dev options: " + installSrcValue);
+                    }
+                } catch (Exception e) {
+                    Log.e(TAG, "EXTROM: Error occured: " + e.getMessage());
+                }
+            }
+            // end: extendrom intercept installation source
+
             PackageInfo packageInfo = mayFakeSignature(p, PackageInfoUtils.generate(p, gids, flags,
                     ps.firstInstallTime, ps.lastUpdateTime, permissions, state, userId, ps),
                     permissions);
