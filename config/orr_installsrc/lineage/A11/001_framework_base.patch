
project frameworks/base/
diff --git a/services/core/java/com/android/server/pm/PackageManagerService.java b/services/core/java/com/android/server/pm/PackageManagerService.java
index 6c209a2c0e34a..e4bd70fe1033a 100644
--- a/services/core/java/com/android/server/pm/PackageManagerService.java
+++ b/services/core/java/com/android/server/pm/PackageManagerService.java
@@ -21607,6 +21607,57 @@ public class PackageManagerService extends IPackageManager.Stub
             return null;
         }
 
+        /**
+            extendrom intercept installation source
+            - com.machiav3lli.backup: Neo Backup
+            - F-Droid on e.g A11 results in: com.android.packageinstaller
+            - null: usually a system app
+            callingUid != Process.SYSTEM_UID: show App info correctly, allows origin App Store update
+        **/
+        boolean systemApp = ps.pkg.isSystem();
+        if (!systemApp) {
+            String PACKAGE_PLAY_STORE = "com.android.vending";
+            String[] PACKAGES_SPOOF_INSTALLSOURCE =
+                new String[] {  "com.aurora.store",
+                                "dev.imranr.obtainium",
+                                "com.machiav3lli.backup"
+                             };
+            try {
+                String interceptInstSrc = android.os.SystemProperties.get(
+                    "persist.vendor.er.orrinstallsrc", "disabled");
+                InstallSource installSource = ps.installSource;
+
+                if (callingUid != Process.SYSTEM_UID
+                        && "enabled".equals(interceptInstSrc)
+                        && installSource.installerPackageName != null
+                        && mSettings.getPackageLPr(PACKAGE_PLAY_STORE) != null
+                        && (Arrays.asList(PACKAGES_SPOOF_INSTALLSOURCE).contains(installSource.installerPackageName)
+                            || Arrays.asList(PACKAGES_SPOOF_INSTALLSOURCE).contains(installSource.initiatingPackageName))) {
+                    Log.w(TAG, "EXTENDROM: cond4: INTERCEPTING !!! installer/initiator: " + installSource.installerPackageName + "/" + installSource.initiatingPackageName + ", pkg: " + packageName + ", UID: " + callingUid + ", systemApp: " + systemApp);
+
+                    // see: services/core/java/com/android/server/pm/InstallSource.java
+                    ps.installSource = InstallSource.create(
+                        PACKAGE_PLAY_STORE,                   /* initiatingPackageName */
+                        installSource.initiatingPackageName,  /* originatingPackageName */
+                        PACKAGE_PLAY_STORE,                   /* installerPackageName */
+                        installSource.isOrphaned,
+                        false)
+                        .setInitiatingPackageSignatures(new PackageSignatures(
+                          mSettings.mPackages.get(PACKAGE_PLAY_STORE).getSigningDetails()));
+                    ps.setInstallerPackageName(PACKAGE_PLAY_STORE);
+                } else {
+                    Log.d(TAG, "EXTENDROM: cond4: NOT intercepting initiator/installer: " + installSource.initiatingPackageName + "/" + installSource.installerPackageName + ", pkg: " + packageName + ", UID: " + callingUid + ", systemApp: " + systemApp + ", originator: " + installSource.originatingPackageName);
+                }
+            } catch (Exception e) {
+                Log.e(TAG, "EXTENDROM: Error occured: " + e.getMessage());
+            }
+            //Log.d(TAG, "EXTENDROM: cond1: installer/initiator: " + ps.installSource.installerPackageName + "/" + ps.installSource.initiatingPackageName + ", pkg: " + packageName + ", UID: " + callingUid + ", systemApp: " + systemApp);
+        //} else {
+        //    Log.d(TAG, "EXTENDROM: cond0: installer/initiator: " + ps.installSource.installerPackageName + "/" + ps.installSource.initiatingPackageName + ", pkg: " + packageName + ", UID: " + callingUid + ", systemApp: " + systemApp);
+        }
+        // end: extendrom intercept installation source
+        //Log.w(TAG, "EXTENDROM: after TRY: pkg=" + packageName);
+
         return ps.installSource;
     }

