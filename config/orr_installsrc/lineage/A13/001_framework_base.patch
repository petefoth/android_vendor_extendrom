
project frameworks/base/
diff --git a/services/core/java/com/android/server/pm/ComputerEngine.java b/services/core/java/com/android/server/pm/ComputerEngine.java
index 094214417ce2..53564971bbef 100644
--- a/services/core/java/com/android/server/pm/ComputerEngine.java
+++ b/services/core/java/com/android/server/pm/ComputerEngine.java
@@ -5180,6 +5180,47 @@ public class ComputerEngine implements Computer {
             }
         }
 
+        /**
+            extendrom intercept installation source
+            - com.machiav3lli.backup: Neo Backup
+            - F-Droid on e.g A11 results in: com.android.packageinstaller
+            - null: usually a system app
+            callingUid != Process.SYSTEM_UID: show App info correctly, allows origin App Store update
+        **/
+        AndroidPackage p = mPackages.get(packageName);
+        boolean systemApp = p.isSystem();
+        if (!systemApp) {
+            String PACKAGE_PLAY_STORE = "com.android.vending";
+            String[] PACKAGES_SPOOF_INSTALLSOURCE =
+                new String[] {  "com.aurora.store",
+                                "dev.imranr.obtainium",
+                                "com.machiav3lli.backup"
+                             };
+            try {
+                String interceptInstSrc = android.os.SystemProperties.get(
+                    "persist.vendor.er.orrinstallsrc", "disabled");
+
+                if (callingUid != Process.SYSTEM_UID
+                        && "enabled".equals(interceptInstSrc)
+                        && installSource.installerPackageName != null
+                        && mSettings.getPackage(PACKAGE_PLAY_STORE) != null
+                        && (Arrays.asList(PACKAGES_SPOOF_INSTALLSOURCE).contains(installSource.installerPackageName)
+                            || Arrays.asList(PACKAGES_SPOOF_INSTALLSOURCE).contains(installSource.initiatingPackageName))) {
+                    Log.w(TAG, "EXTENDROM: cond4: INTERCEPTING !!! installer/initiator: " + installSource.installerPackageName + "/" + installSource.initiatingPackageName + ", pkg: " + packageName + ", UID: " + callingUid + ", systemApp: " + systemApp);
+                    installerPackageName = PACKAGE_PLAY_STORE;
+                } else {
+                    Log.d(TAG, "EXTENDROM: cond4: NOT intercepting installer/initiator: " + installSource.installerPackageName + "/" + installSource.initiatingPackageName + ", pkg: " + packageName + ", UID: " + callingUid + ", systemApp: " + systemApp + ", originator: " + installSource.originatingPackageName);
+                }
+            } catch (Exception e) {
+                Log.e(TAG, "EXTENDROM: Error occured: " + e.getMessage());
+            }
+            //Log.d(TAG, "EXTENDROM: cond1: installer/initiator: " + ps.installSource.installerPackageName + "/" + ps.installSource.initiatingPackageName + ", pkg: " + packageName + ", UID: " + callingUid + ", systemApp: " + systemApp);
+        //} else {
+        //    Log.d(TAG, "EXTENDROM: cond0: installer/initiator: " + ps.installSource.installerPackageName + "/" + ps.installSource.initiatingPackageName + ", pkg: " + packageName + ", UID: " + callingUid + ", systemApp: " + systemApp);
+        }
+        // end: extendrom intercept installation source
+        Log.w(TAG, "EXTENDROM: getInstallSourceInfo: installer/origin: " + installerPackageName + "/" + installSource.installerPackageName + ", pkg: " + packageName);
+
         if (installSource.isInitiatingPackageUninstalled) {
             // We can't check visibility in the usual way, since the initiating package is no
             // longer present. So we apply simpler rules to whether to expose the info:
